result = treeSort(list)

list = cons(3, cons(5, cons(1, cons(2, cons(4, 'nil)))))

treeSort(l) = 
    treeToList(treeFromList(l))

treeToList(t) =
    if isNode(t) then
        listAppend(
            treeToList(nodeLeft(t)),
            listAppend(
                cons(nodeData(t), 'nil),
                treeToList(nodeRight(t))
            )
        )
    else if isLeaf(t) then
        cons(leafData(t), 'nil)
    else
        'nil

treeFromList(l) =
    if pair?(l) then
        treeInsert(car(l), treeFromList(cdr(l)))
    else
        'empty

treeInsert(x, t) =
    if isNode(t) then
        if lq?(x, nodeData(t)) then
            makeNode(nodeData(t), treeInsert(x, nodeLeft(t)), nodeRight(t))
        else
            makeNode(nodeData(t), nodeLeft(t), treeInsert(x, nodeRight(t)))
    else if isLeaf(t) then
        if lq?(x, leafData(t)) then
            makeNode(leafData(t), makeLeaf(x), 'empty)
        else
            makeNode(leafData(t), 'empty, makeLeaf(x))
    else
        makeLeaf(x)

nodeRight(t) = cdr(cdr(cdr(t)))
nodeLeft(t) = car(cdr(cdr(t)))
nodeData(n) = car(cdr(n))
isNode(x) =
    if pair?(x) then
        eq?(car(x), 'node)
    else
        'false
makeNode(x, l, r) = cons('node, cons(x, cons(l, r)))

leafData(l) = cdr(l)
isLeaf(x) =
    if pair?(x) then
        eq?(car(x), 'leaf)
    else
        'false
makeLeaf(x) = cons('leaf, x)

listAppend(l1, l2) =
    if pair?(l1) then
        cons(car(l1), listAppend(cdr(l1), l2))
    else
        l2